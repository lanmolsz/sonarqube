<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.permission.GroupPermissionMapper">

  <select id="groupsCountByProjectIdAndPermission" parameterType="map"
          resultType="org.sonar.db.permission.CountPerProjectPermission">
    SELECT count(1) as count, permission, componentId
    FROM
    (SELECT g.name as name, group_role.role as permission, group_role.resource_id as componentId
    FROM groups g
    INNER JOIN group_roles group_role ON group_role.group_id=g.id
    UNION
    -- Add Anyone group permission
    SELECT #{anyoneGroup} as name, group_role.role as permission, group_role.resource_id as componentId
    FROM group_roles group_role
    where group_role.group_id IS NULL
    ) groups
    where
      groups.componentId in
      <foreach collection="componentIds" open="(" close=")" item="id" separator=",">
        #{id,jdbcType=BIGINT}
      </foreach>
    GROUP BY groups.permission, groups.componentId
  </select>

  <select id="countGroups" parameterType="map" resultType="int">
    SELECT count(1)
    FROM
    (SELECT g.name as name
    FROM groups g
    INNER JOIN group_roles group_role ON group_role.group_id=g.id
    AND group_role.role=#{permission,jdbcType=VARCHAR}
    <if test="componentId != null">
      AND group_role.resource_id=#{componentId,jdbcType=BIGINT}
    </if>
    <if test="componentId == null">
      AND group_role.resource_id IS NULL
    </if>
    UNION
    -- Add Anyone group permission
    SELECT #{anyoneGroup} as name
    FROM group_roles group_role
    where
      group_role.role=#{permission,jdbcType=VARCHAR}
      AND group_role.group_id IS NULL
      <if test="componentId != null">
        AND group_role.resource_id=#{componentId,jdbcType=BIGINT}
      </if>
      <if test="componentId == null">
        AND group_role.resource_id IS NULL
      </if>
    ) groups
  </select>

  <select id="selectGroupNamesByPermissionQuery" parameterType="map" resultType="string">
    select distinct gr.name, lower(gr.name), gr.group_id
    <include refid="groupsByQuery" />
    order by lower(gr.name), gr.name, gr.group_id
  </select>

  <select id="countGroupsByPermissionQuery" parameterType="map" resultType="int">
    select count(1)
    from (
      select distinct gr.group_id
      <include refid="groupsByQuery" />) g
  </select>

  <sql id="groupsByQuery">
    from (
    select g.id as group_id, g.name as name, gr.role as permission, gr.resource_id as resource_id, gr.id as id
    from groups g
      left join group_roles gr on g.id = gr.group_id
    UNION ALL
    select 0 as group_id, 'Anyone' as name, gr.role as permission, gr.resource_id as resource_id, gr.id as id
    from group_roles gr
    <if test="query.withAtLeastOnePermission()">
      where gr.group_id is null
    </if>
    ) gr
    left join projects p on gr.resource_id = p.id
    <where>
      <if test="query.searchQueryToSql != null">
        and lower(gr.name) like #{query.searchQueryToSql,jdbcType=VARCHAR} ESCAPE '/'
      </if>
      <!-- filter rows with group permissions -->
      <if test="query.withAtLeastOnePermission()">
        and gr.permission is not null
        <if test="query.componentUuid==null">
          and gr.resource_id is null
        </if>
        <if test="query.componentUuid!=null">
          and p.uuid=#{query.componentUuid,jdbcType=VARCHAR}
        </if>
        <if test="query.permission!=null">
          and gr.permission=#{query.permission,jdbcType=VARCHAR}
        </if>
      </if>
    </where>
  </sql>

  <select id="selectGroupPermissionByGroupNames" parameterType="map" resultType="GroupPermission">
    SELECT sub.id, sub.groupId, sub.resourceId, sub.role
    FROM
      (
      SELECT gr.id AS id, gr.group_id AS groupId, gr.resource_id AS resourceId, gr.role AS role, g.name AS name
      FROM group_roles gr
      INNER JOIN groups g ON g.id=gr.group_id
      UNION ALL
      SELECT gr.id as id, 0 AS group_id, gr.resource_id AS resource_id, gr.role AS role, 'Anyone' AS name
      FROM group_roles gr
      WHERE gr.group_id is null
      ) sub
    where
      sub.name IN
      <foreach collection="groupNames" open="(" close=")" item="name" separator=",">
        #{name}
      </foreach>
      <if test="projectId!=null">
        AND sub.resourceId=#{projectId,jdbcType=BIGINT}
      </if>
      <if test="projectId==null">
        AND sub.resourceId IS NULL
      </if>
  </select>

  <select id="selectGlobalPermissionsOfGroup" parameterType="map" resultType="String">
    select gr.role
    from group_roles gr
    where
    gr.organization_uuid = #{organizationUuid,jdbcType=VARCHAR} and
    gr.resource_id is null and
    <choose>
      <when test="groupId != null">
        gr.group_id = #{groupId,jdbcType=BIGINT}
      </when>
      <otherwise>
        gr.group_id is null
      </otherwise>
    </choose>
  </select>

  <select id="selectProjectPermissionsOfGroup" parameterType="map" resultType="String">
    select gr.role
    from group_roles gr
    where
    gr.organization_uuid = #{organizationUuid,jdbcType=VARCHAR} and
    gr.resource_id = #{projectId,jdbcType=BIGINT} and
    <choose>
      <when test="groupId != null">
        gr.group_id = #{groupId,jdbcType=BIGINT}
      </when>
      <otherwise>
        gr.group_id is null
      </otherwise>
    </choose>
  </select>

  <select id="countRowsByRootComponentId" parameterType="long" resultType="int">
    select count(1)
    from group_roles
    where resource_id=#{rootComponentId,jdbcType=BIGINT}
  </select>

  <insert id="insert" parameterType="GroupPermission" keyColumn="id" useGeneratedKeys="true" keyProperty="id">
    insert into group_roles (
    organization_uuid,
    group_id,
    resource_id,
    role
    ) values (
    #{organizationUuid,jdbcType=VARCHAR},
    #{groupId,jdbcType=BIGINT},
    #{resourceId,jdbcType=BIGINT},
    #{role,jdbcType=VARCHAR}
    )
  </insert>

  <delete id="deleteByRootComponentId" parameterType="long">
    delete from group_roles
    where resource_id=#{rootComponentId,jdbcType=BIGINT}
  </delete>

  <delete id="delete" parameterType="map">
    delete from group_roles
    where
    role=#{permission,jdbcType=VARCHAR} and
    organization_uuid=#{organizationUuid,jdbcType=VARCHAR} and
    <choose>
      <when test="rootComponentId != null">
        resource_id=#{rootComponentId,jdbcType=BIGINT}
      </when>
      <otherwise>
        resource_id is null
      </otherwise>
    </choose>
    and
    <choose>
      <when test="groupId != null">
        group_id=#{groupId,jdbcType=BIGINT}
      </when>
      <otherwise>
        group_id is null
      </otherwise>
    </choose>
  </delete>

  <delete id="deleteByOrganization" parameterType="String">
    delete from
      group_roles
    where
      organization_uuid=#{organizationUuid,jdbcType=VARCHAR}
  </delete>

</mapper>
